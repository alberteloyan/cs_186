package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

	private JoinPredicate jp;
	private DbIterator dbi1;
	private DbIterator dbi2;
	private boolean oRotate = true;
	private boolean contOn = true;
	private Tuple oTuple;
    private static final long serialVersionUID = 1L;
    

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.jp = p;
        this.dbi1 = child1;
        this.dbi2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return (String) dbi1.getTupleDesc().getFieldName(this.jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        //return(String) dbi1.getTupleDesc().getFieldName(this.jp.getField2());or
        return (String) dbi2.getTupleDesc().getFieldName(this.jp.getField1());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td1 = this.dbi1.getTupleDesc();
        TupleDesc td2 = this.dbi2.getTupleDesc();
        TupleDesc td3 = TupleDesc.merge(td1, td2);
        return td3;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        this.dbi1.open();
        this.dbi2.open();
    }

    public void close() {
        // some code goes here
        super.close();
        this.dbi1.close();
        this.dbi2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.dbi1.rewind();
        this.dbi2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // check if more outer tuples exist before iteration over outer relation
		Tuple output = null;
		if(oRotate) {
			contOn = dbi1.hasNext();
		}
        while(contOn){
        	if(oRotate){
            	oTuple = dbi1.next();
                }       
                while(dbi2.hasNext()){
					Tuple iTuple = dbi2.next();
                    if(jp.filter(oTuple, iTuple)){
                    	oRotate = false;
                        output = new Tuple(this.getTupleDesc());
                        int i = 0;
                        for(; i < oTuple.getTupleDesc().numFields(); i ++){
                        	output.setField(i, oTuple.getField(i));
                        }
                        for(int j = i; j < output.getTupleDesc().numFields(); j++){
                        	output.setField(j, iTuple.getField(j-i));
                        }
                        return output;
                   	}
                }
                dbi2.rewind();
                oRotate = true; 
                contOn = dbi1.hasNext();     
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{this.dbi1,this.dbi2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.dbi1 = children[0];
        this.dbi2 = children[1];
    }

}
