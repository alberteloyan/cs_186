package simpledb;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * TableStats represents statistics (e.g., histograms) about base tables in a
 * query. 
 * 
 * This class is not needed in implementing proj1 and proj2.
 */
public class TableStats {

    private static final ConcurrentHashMap<String, TableStats> statsMap = new ConcurrentHashMap<String, TableStats>();

    static final int IOCOSTPERPAGE = 1000;

    public static TableStats getTableStats(String tablename) {
        return statsMap.get(tablename);
    }

    public static void setTableStats(String tablename, TableStats stats) {
        statsMap.put(tablename, stats);
    }
    
    public static void setStatsMap(HashMap<String,TableStats> s)
    {
        try {
            java.lang.reflect.Field statsMapF = TableStats.class.getDeclaredField("statsMap");
            statsMapF.setAccessible(true);
            statsMapF.set(null, s);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

    }

    public static Map<String, TableStats> getStatsMap() {
        return statsMap;
    }

    public static void computeStatistics() {
        Iterator<Integer> tableIt = Database.getCatalog().tableIdIterator();

        System.out.println("Computing table stats.");
        while (tableIt.hasNext()) {
            int tableid = tableIt.next();
            TableStats s = new TableStats(tableid, IOCOSTPERPAGE);
            setTableStats(Database.getCatalog().getTableName(tableid), s);
        }
        System.out.println("Done.");
    }

    /**
     * Number of bins for the histogram. Feel free to increase this value over
     * 100, though our tests assume that you have at least 100 bins in your
     * histograms.
     */
    static final int NUM_HIST_BINS = 100;
    private int tid;
    private int iospp;
    private Map<String, IntHistogram> fieldBuckets;
    private Map<String, StringHistogram> strfieldBuckets;
    private Map<String, Integer> histMax;
    private Map<String, Integer> histMin;
    private int numTups = 0;
    private HeapFile file;

    /**
     * Create a new TableStats object, that keeps track of statistics on each
     * column of a table
     * 
     * @param tableid
     *            The table over which to compute statistics
     * @param ioCostPerPage
     *            The cost per page of IO. This doesn't differentiate between
     *            sequential-scan IO and disk seeks.
     */
    public TableStats(int tableid, int ioCostPerPage) {
        // For this function, you'll have to get the
        // DbFile for the table in question,
        // then scan through its tuples and calculate
        // the values that you need.
        // You should try to do this reasonably efficiently, but you don't
        // necessarily have to (for example) do everything
        // in a single scan of the table.
        // some code goes here
        this.tid = tableid;
        this.iospp = ioCostPerPage;
        this.file = (HeapFile)Database.getCatalog().getDbFile(tableid);
        this.fieldBuckets = new HashMap<String, IntHistogram>();
        this.strfieldBuckets = new HashMap<String, StringHistogram>();
        this.histMax = new HashMap<String, Integer>();
        this.histMin = new HashMap<String, Integer>();
        //System.out.println("dbFile = " + this.file);
        
        
        DbFileIterator dbiter = this.file.iterator(null); // or new TransactionId()?
        TupleDesc ftd = this.file.getTupleDesc();
        try {
        	dbiter.open();
        	//System.out.println("We are trying... not iterating yet because dbiter.hasNext() = " + dbiter.hasNext());
        	while(dbiter.hasNext()) {
        		//System.out.println("We are passing through interator");
        		this.numTups++; 
        		Tuple currentTup = dbiter.next();
        		//System.exit(1);
        		for(int i = 0; i < ftd.numFields(); i++) {
        			//String fName = ftd.getFieldName(i); //same as ftd.getFieldName(i)?
        			if(ftd.getFieldType(i).equals(Type.INT_TYPE)) {
        				IntField field = (IntField)currentTup.getField(i);
        				String fName = ftd.getFieldName(i);
        				if(!this.histMin.containsKey(fName)) {
        					this.histMin.put(fName, field.getValue()); 
        				}
        				else if (field.getValue() < this.histMin.get(fName)) {
        					this.histMin.put(fName, field.getValue()); 
        				}
        				if(!this.histMax.containsKey(fName)){
        					this.histMax.put(fName, field.getValue()); 
        				}
        				else if (field.getValue() > this.histMax.get(fName)) {
        					this.histMax.put(fName, field.getValue());
        				}
        			}
        		}
        	}
        }
        catch (DbException dbe) {
        	System.out.println("DbException occurred " + dbe.toString());
        	dbe.printStackTrace();
        }
        catch (TransactionAbortedException tae) {
        	System.out.println("TransactionAbortedException occurred " + tae.toString());
        	tae.printStackTrace();
        }
        dbiter.close();
        
        
        dbiter = this.file.iterator(null); // or new TransactionId()?
        ftd = this.file.getTupleDesc();
        try {
        	dbiter.open();
        	//System.out.println("We are trying... not iterating yet because dbiter.hasNext() = " + dbiter.hasNext());
        	while(dbiter.hasNext()) {
        		//System.out.println("We are passing through interator"); <This mofo was causing the heap space error! Damn
        		//this.numTups++; 
        		Tuple currentTup = dbiter.next();
        		//System.exit(1);
        		for(int i = 0; i < ftd.numFields(); i++) {
        			String fName = ftd.getFieldName(i); //same as ftd.getFieldName(i)?
        			if(ftd.getFieldType(i).equals(Type.INT_TYPE)) {
        				IntField field = (IntField)currentTup.getField(i);
        				
        				/*if(!this.histMin.containsKey(fName) || (field.getValue() < this.histMin.get(fName))) {
        					this.histMin.put(fName, field.getValue()); 
        				}
        				if(!this.histMax.containsKey(fName) || (field.getValue() > this.histMax.get(fName))) {
        					this.histMax.put(fName, field.getValue()); 
        				}*/
        				
        				if(!this.fieldBuckets.containsKey(fName)) {
        					this.fieldBuckets.put(fName, new IntHistogram(this.NUM_HIST_BINS,this.histMin.get(fName), this.histMax.get(fName)));
        				}
        				
        				IntHistogram intHist = this.fieldBuckets.get(fName);
        				intHist.addValue(field.getValue());
        				this.fieldBuckets.put(fName, intHist);
        				
        			}
        			
        			else {
        				StringField field = (StringField)currentTup.getField(i);
        				
        				if(!this.strfieldBuckets.containsKey(fName)) {
        					this.strfieldBuckets.put(fName, new StringHistogram(NUM_HIST_BINS));
        				}
        				
        				StringHistogram strHist = this.strfieldBuckets.get(fName);
        				strHist.addValue(field.getValue());
        				this.strfieldBuckets.put(fName, strHist);
        			}
        		}
        		
        	}
        	//dbiter.close();
        }
        catch (DbException dbe) {
        	System.out.println("DbException occurred " + dbe.toString());
        	dbe.printStackTrace();
        }
        catch (TransactionAbortedException tae) {
        	System.out.println("TransactionAbortedException occurred " + tae.toString());
        	tae.printStackTrace();
        }
        dbiter.close();
        
  	}
  	
  

    /**
     * Estimates the cost of sequentially scanning the file, given that the cost
     * to read a page is costPerPageIO. You can assume that there are no seeks
     * and that no pages are in the buffer pool.
     * 
     * Also, assume that your hard drive can only read entire pages at once, so
     * if the last page of the table only has one tuple on it, it's just as
     * expensive to read as a full page. (Most real hard drives can't
     * efficiently address regions smaller than a page at a time.)
     * 
     * @return The estimated cost of scanning the table.
     */
    public double estimateScanCost() {
        // some code goes here
        return this.file.numPages() * this.iospp;
    }

    /**
     * This method returns the number of tuples in the relation, given that a
     * predicate with selectivity selectivityFactor is applied.
     * 
     * @param selectivityFactor
     *            The selectivity of any predicates over the table
     * @return The estimated cardinality of the scan with the specified
     *         selectivityFactor
     */
    public int estimateTableCardinality(double selectivityFactor) {
        // some code goes here
        System.out.println(numTups);
        return (int)(this.numTups * selectivityFactor);
    }

    /**
     * The average selectivity of the field under op.
     * @param field
     *        the index of the field
     * @param op
     *        the operator in the predicate
     * The semantic of the method is that, given the table, and then given a
     * tuple, of which we do not know the value of the field, return the
     * expected selectivity. You may estimate this value from the histograms.
     * */
    public double avgSelectivity(int field, Predicate.Op op) {
        // some code goes here
        return 1.0;
    }

    /**
     * Estimate the selectivity of predicate <tt>field op constant</tt> on the
     * table.
     * 
     * @param field
     *            The field over which the predicate ranges
     * @param op
     *            The logical operation in the predicate
     * @param constant
     *            The value against which the field is compared
     * @return The estimated selectivity (fraction of tuples that satisfy) the
     *         predicate
     */
    public double estimateSelectivity(int field, Predicate.Op op, Field constant) {
        TupleDesc ftd = file.getTupleDesc();
        String fName = ftd.getFieldName(field);
        
        if(ftd.getFieldType(field).equals(Type.INT_TYPE)) {
        	IntField estField = (IntField)constant;
            IntHistogram intHist = fieldBuckets.get(fName);
            return intHist.estimateSelectivity(op, estField.getValue());
        } 
        else {
            StringField estField= (StringField)constant;
            StringHistogram strHist = strfieldBuckets.get(fName);
            return strHist.estimateSelectivity(op, estField.getValue());
        }
    }

    /**
     * return the total number of tuples in this table
     * */
    public int totalTuples() {
        // some code goes here
        return this.numTups;
    }

}
